name: ENC-RUNNER

on:
  push:
    branches:
      - main

jobs:
  download:
    runs-on: ubuntu-latest
    container:
      image: docker.io/amandaa00/git-atc:test-para
    outputs:
      segments: ${{ steps.get-segments.outputs.segments }}
    steps:
      - name: Install jq
        run: |
          apt-get update
          apt-get install -y jq
      - name: Cache files for download
        id: cache-files
        uses: actions/cache@v3
        with:
          path: /app
          key: ${{ github.sha }}-download
      - name: Run download script
        run: |
          cd /app
          python3 download.py ZnVjawZXlKUFYwNUZVaUk2SWt0cGJtYzVPRGd4SWl3aVVrVlFUeUk2SW5WeVltRnVMVzlqZEc4dGMzVmpZMjkwWVhOb0lpd2lWRWRmUVZCSlgwbEVJam9pTVRZMU5EWXlOekFpTENKVVIxOUJVRWxmU0VGVFNDSTZJakZsTVdWbU1XSmlZalpsT0dNMlltTTVNREF5TURkallUVmhNVEZqWmpaaUlpd2lWRWRmUWs5VVgxUlBTMFZPSWpvaU5USTRNamszTkRjMk5UcEJRVWRJVG1wQ1EzRlNlWFo0WjFWVE9XOTVORWhVUjBOME5VSkRhbk5rTFVwaWN5SXNJa1pKVEVVaU9qZzRPQ3dpUmtsTVJWOU9RVTFGSWpvaVd5QkNURU1nWFNBZ1V6TkZPU0JaWld4c2IzZHpkRzl1WlM1dGEzWWlMQ0pKUkNJNklsbGxiRjh6WWpjOU55SXNJa05OUkNJNklscHRXblJqUjFadVNVTXhjRWxJZEhCaWJEbHRZVmQ0YkdaVFFYUmFiV3h6WkVkV2VWZ3lUblppV0VKeldsaG5aMGx0VW5sWldHUXdXbGhvTUZCWFduWmlibEp0WVZkNGJGQlhaM1ZrU0ZKdFQyNVNiR1ZJVVRsS2VVSlZVbmxCZEVsRlFtbGlTRlpzV1RKR2NscFdPWFZhV0ZJellqTktja2xEWXpaYWJUbDFaRWRPZG1KSE9YbFFXR1J2WVZoU2JFOXRXblppYmxKNllWaHdiRkJVU1RCUGJtYzVUVlJCTm1WVU1IaE5RMGxuVEZjeGFHTkRRWGRKUXpGMFdsaFNhRnBIUmpCWlZIQjZUMjFGWjJSSGJEQmlSMVU1U1d4U1NFOXBRa0ZaYlhneFdsZE9hR0V5Vm1aaWJWWXdaREk1ZVdGNVNXZE1WekZzWkVkR2ExbFlVbWhQYmswMlkzbENNR0ZZVW5OYVZEQnBWa1ZqTmtsRlFtbGlTRlpzV1RKR2NscFdPWFZhV0ZJellqTktja2xEU1dkTVZ6RnNaRWRHYTFsWVVtaEpTRkp3WkVkNGJGQlRTbFZTZW05blVVZEtjMlJYVm1wWlYzUnNXREkxYkdSSVpIWmpiWE5wU1VNeGFrOXVXV2RpUjJ4cFl6TmFNRmxZV1hoSlF6RjNZMjFXZWxwWVVXZE9hVUYwV25sQmVVNUVRV2RNV0UxblRWUkpORTFJWnpOTmFrRm5URmhDY0dWR09XMWlXRkZuWlZoV01rNUVTWGRqUTBGMFl6TmFNRmxZV1hoTVdFSm9ZMjFHZEdONVFqQmtWelZzVUZSRk5scHRiSE5pVXpGdVkyMUdjR0pxTUhkSlF6RnFZMjFaWjA1RVkyZE1WM2gyV2pKNGJHUnRWbk5KUjFaNVkyMDVlVWxETVdwUGJVVm5Za2RzYVdJelFqRmplVUYwV1ZkTlowMXBRWFJaVjBsblRrUkNja2xETVdwUGJrMW5XVEk1ZDJWVFFqZGlNMEptV20xc2MxcFlNR2RNV0dzOUluMD0=
          
      - name: Get segments
        id: get-segments
        run: |
          SEGMENTS=$(jq -c '.OUTPUT_FILES | keys' /app/data.json)
          echo "segments=$SEGMENTS" >> $GITHUB_OUTPUT

  encode:
    needs: download
    runs-on: ubuntu-latest
    strategy:
      matrix:
        segment: ${{ fromJson(needs.download.outputs.segments) }}
    container:
      image: docker.io/amandaa00/git-atc:test-para
    steps:
      - name: Install jq
        run: |
          apt-get update
          apt-get install -y jq
      - name: Restore download cache
        uses: actions/cache@v3
        with:
          path: /app
          key: ${{ github.sha }}-download
      - name: Encode segment
        run: |
          cd /app
          mkdir -p encoded
          python3 encode.py ${{ matrix.segment }}
      - name: Save encoded segment
        uses: actions/cache@v3
        with:
          path: /app/encoded
          key: ${{ github.sha }}-segment-${{ matrix.segment }}

  upload:
    needs: encode
    runs-on: ubuntu-latest
    container:
      image: docker.io/amandaa00/git-atc:test-para
    steps:
      - name: Install jq
        run: |
          apt-get update
          apt-get install -y jq
      - name: Restore download cache
        uses: actions/cache@v3
        with:
          path: /app
          key: ${{ github.sha }}-download
      - name: Setup directories
        run: |
          echo "Creating necessary directories..."
          mkdir -p /tmp/encoded_segments
          mkdir -p /app/encoded
          echo "Directories created:"
          ls -la /tmp/encoded_segments
          ls -la /app/encoded
      - name: Restore each segment and move files
        run: |
          echo "Starting to process segments..."
          echo "Available segments: $(echo '${{ needs.download.outputs.segments }}' | jq -r '.[]')"
          
          for segment in $(echo '${{ needs.download.outputs.segments }}' | jq -r '.[]'); do
            echo "Processing segment: $segment"
            
            # Create temp directory for this segment
            echo "Creating temp directory for segment $segment"
            mkdir -p "/tmp/encoded_segments/$segment"
            
            # Generate cache key
            SEGMENT_KEY="${{ github.sha }}-segment-$segment"
            echo "Cache key for segment: $SEGMENT_KEY"
            
            # Restore cache
            echo "Restoring cache for segment $segment..."
            gh cache restore "$SEGMENT_KEY" --path "/tmp/encoded_segments/$segment"
            
            echo "Contents of temp directory for segment $segment:"
            ls -la "/tmp/encoded_segments/$segment"
            
            # Copy files
            echo "Copying files to /app/encoded..."
            cp -rv /tmp/encoded_segments/$segment/* /app/encoded/
            
            echo "Current contents of /app/encoded:"
            ls -la /app/encoded
            
            echo "Finished processing segment: $segment"
            echo "----------------------------------------"
          done
          
          echo "All segments processed. Final contents of /app/encoded:"
          ls -la /app/encoded
          
          echo "File sizes in /app/encoded:"
          du -sh /app/encoded/*
          
          echo "Total size of /app/encoded:"
          du -sh /app/encoded
      - name: Merge and upload files
        run: |
          echo "Starting merge and upload process..."
          cd /app
          echo "Current working directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of encoded directory:"
          ls -la encoded/
          echo "Running upload script..."
          python3 upload.py
          echo "Upload complete!"
